{
  "sdl_source_type": "PWS",
  "source_library": "SRC-dissecting",
  "file_name": "sailing.ext",
  "document_url": "http://spoolsenlightenment's.com",
  "uploaded_by": "Kalin c Seredyuk",
  "last_modified": "8/21/2018",
  "sdl_date": "2020-11-30T00:00:00",
  "countryPublished": "Sudan",
  "conference": "parity's guarantor's xj Bjarne",
  "originalAuthorName": "Rodovica v Kochli",
  "title": "Ingram subcompact",
  "declaredTags": "avalanche photodiodes|space launches|risk-based decision making|EVMS|administrative efficiency",
  "releaseReason": "Dipper's/Bobbi",
  "docName": "DJ_40_7901",
  "fundingCenter": 42,
  "resourceURL": "https://nationalism.com",
  "fundingDepartment": "nr94",
  "caseNumber": "28-1730",
  "publicationDate": "12/3/2019 12:00:00 AM",
  "releaseYear": 2011,
  "releaseStatement": "Advertising/Recruiting",
  "approver": "$Lenard $Poppenwimmer",
  "handCarry": 8,
  "authorDivision": "vt25",
  "copyrightOwner": "Adeline Bohmler",
  "lastModifiedDate": "3/1/2012 12:00:00 AM",
  "releaseDate": "3/14/2018 12:00:00 AM",
  "onMitrePublicSrvr": 0,
  "projectNumber": "1081LWOQ12",
  "materialType": "Book",
  "publicationType": "Book",
  "authorCenter": 59,
  "originalAuthorID": "Leigh",
  "mitrePublicServer": 0,
  "subjectTerminology": "Education and Training (General)",
  "dateEntered": "1/20/2003 12:00:00 AM",
  "documentInfoURL": "https://Jarlsberg's dream's Kenya's sorrel fortes.com",
  "softShell": 0,
  "publishedOnNonMITREServer": 0,
  "priorCaseNumbers": "CASE1: 17-2336|CASE1: 13-0202|CASE1: 17-4622",
  "organization": "gh14",
  "authorDepartment": "mw78",
  "publicationYear": 1998,
  "sensitivity": "Public",
  "copyrightText": "(c) 2016 The MITRE Corporation All Rights Reserved",
  "fundingSource": "DHS FFRDC Contracts",
  "level1": "HR, Strat Comm & BD Ops/Dev",
  "fundingDivision": "liege's pragmatist purer hearing aerobics",
  "publishedOutsideUSA": 0,
  "level3": "bx44",
  "level2": "va90",
  "sdl_id": "2beb6c69a8a348199864ca2ef0e4cbe6",
  "text": "security, lifecycle management, \\ndevice and data integrity, and device authentication. A potential use case: In June 2016, the DHS Science and Technology (S&T) Division awarded a \\n$199,000 contract to Factom to study possible blockchain-based advancements for the security \\nof digital identities for the IoT, the upcoming connection and convergence of mobile devices, \\ninformation technology networks, and connected sensors and devices. The project, titled Blockchain Software to Prove Integrity of Captured Data From Border \\nDevices, will create an identity log that captures the identification of a device, who \\nmanufactured it, lists of available updates, known security issues, and granted authorities while \\nadding the dimension of time for added security. The goal is to limit would-be hackers' abilities \\nto corrupt the past records for a device, making it more difficult to spoof. It's interesting to note \\nthat a North Atlantic Treaty Organization request for proposal also included an IoT section, \\nwhich underlines the synergy between IoT and blockchain technologies for military applications. (DHS Awards Blockchain Grant of Identity Managment, 2016) IoT devices are embedded within our daily lives-from the vehicle we drive to devices we wear \\nit's critical to safeguard these devices from adversaries, said DHS Under Secretary for Science \\nand Technology, Dr. Reginald Brothers. S&T is excited to engage our nation's innovators, \\nhelping us to develop novel solutions for the Homeland Security Enterprise. (DHS Awards \\nBlockchain Grant of Identity Managment, 2016) Survey of Permissioned Blockchains 7.1 Ethereum \\nEthereum (Ethereum Blockchain Application Platform, 2015) is an open-source blockchain \\nplatform that enables developers to build and deploy decentralized applications. In addition to \\nthe common blockchain components, Ethereum includes a custom virtual machine known as the \\nEthereum Virtual Machine (EVM) for executing smart contracts. The EVM is tightly integrated into an Ethereum node, storing the state of smart contracts in a \\nMerkle Tree on the blockchain alongside transactions. Smart contract applications are written in \\nthe Solidity language in a syntax that closely resembles JavaScript. Solidity code is compiled to a 14 binary format and deployed to the blockchain for execution. The flexibility of the EVM allows \\nfor the creation of powerful smart contracts. The default version of Ethereum is a public blockchain using a PoW consensus algorithm. The \\ncryptocurrency of Ethereum is known as Ether and is divisible up to 18 decimal places allowing \\nfor very small micro payments. The Ethereum codebase has a pluggable interface for consensus algorithms, providing the ability \\nto use an alternative consensus model. This is in part due to the growing interest in using \\nEthereum as a permissioned blockchain in the enterprise space (Enterprise Ethereum Alliance, \\n2016). Recently, a company contributed a more traditional BFT consensus plug-in that would be \\na good fit for permissioned blockchains. Initial claims show support of up to 1200 transactions \\nper second. 7.2 Quorum \\nQuorum (Quorum, 2016) is an open-source version of Ethereum maintained by J.P Morgan. It is \\nspecifically designed for permissioned blockchains yet shares many features with Ethereum. \\nQuorum includes three alternatives for consensus: QuorumChain, Raft, and Istanbul BFT. QuorumChain: The first consensus alternative is an innovative round-robin voting \\nconsensus algorithm implemented through an Ethereum smart contract. Parties that can \\ncreate and/or vote on blocks are pre-configured in the initial block (genesis block) and \\nbecome part of the state of the QuorumChain contract. Calls to consensus are through the \\ntraditional Ethereum transactions model. Since the contract uses a simple round-robin \\nvoting approach to consensus (it is not BFT), it is not immune to malicious actors and \\nshould not be used in a network with untrusted participants. Raft: The second consensus alternative is an implementation of the well-known Raft \\nalgorithm (Ongaro & Ousterhout, 2014). Like QuorumChain, Raft is not BFT and should \\nnot be used in a trustless environment. Istanbul BFT: The third option is based on a BFT algorithm. This is targeted to support \\nlimited-trust environments. However, as of this writing the code has not yet been merged \\ninto the official release and is still undergoing testing. One of the key features of Quorum is its support for private transactions. While Quorum supports \\ntraditional Ethereum public transactions, it also provides for private transactions between parties. \\nQuorum extends the Ethereum transaction model by running additional nodes called \\nConstellation that are responsible for securing and processing private transactions. Constellation is a general-purpose system for submitting information in a secure way. It is \\ncomparable to a network of MTA (Message Transfer Agents), where messages are encrypted \\nwith PGP (Pretty Good Privacy). It is not blockchain-specific, and is potentially applicable in \\nmany other types of applications where you want individually sealed message exchange within a \\nnetwork of counterparties. (Quorum Overview) Quorum stores the state of private and public transactions separately so that private transactions \\ncan only be read and processed by the intended parties with access to a specific node. The \\ndownside to this approach is that anyone with access to the node can read the private \\ntransactions. 15 7.3 Tendermint \\nTendermint (Tendermint Blockchain Consensus, 2017) is an open-source blockchain platform, \\nconsisting of three chief technical components: a consensus engine, P2P network layer, and a \\ngeneric application interface for developing smart contracts. Tendermints consensus engine is a BFT consensus protocol ensuring blocks are validated and \\nrecorded on every machine in the same order. Tendermint block times are on average 1 second \\nor less, allowing thousands of transactions per second. For smart contracts, Tendermint provides an extensible application interface, called the \\nApplication Blockchain Interface (ABCI). Using the ABCI interface developers can implement \\nsmart contracts in several different programming languages to include: Go, Python, JavaScript, \\nErlang, C++, and more. Tendermint is designed to be easy-to-use, simple-to-understand, highly performant, and useful \\nfor a wide variety of distributed applications. (Introduction to Tendermint, 2016). MITRE has \\nused Tendermint for several prototypes. 7.4 Hyperledger Fabric \\nHyperledger Fabric (Hyperledger Fabric, 2016) takes a similar approach to Tendermint as a \\nframework for building blockchain applications. It provides a consensus engine with a BFT \\nconsensus algorithm based on Practical Byzantine Fault Tolerance (PBFT), as well as an \\napplication program interface (API ) for interacting with the blockchain. The original \\nimplementation of Fabric was contributed to the open-source Linux Foundation by Digital Asset \\nand IBM. Smart contracts in Fabric are referred to as chaincode and are currently implemented in the Go \\nlanguage and must be run in Docker containers. In addition to chaincode, Fabric also provides \\nadditional features: Membership service provider: a service to facilitate the enrollment of members that are \\nauthorized to participate in the blockchain application Channels: the ability for group to create a separate ledger of transactions for privacy 7.5 Guardtime \\nGuardtime is an Estonian and U.S.-based company that offers a few proprietary blockchain \\nsolutions to governments and industry. One of their main solutions is known as Keyless \\nSignature Infrastructure or KSI (Keyless Signatures 2013). The goal of KSI is not to provide a secure immutable-state machine, but rather to provide a \\nsecure methodology to make assertions about the time and integrity of all sorts of digital records \\nwhile removing as many cryptographic and human assumptions from the security of the system \\nas possible (Guardtime Technology 2017). Guardtime does this through a trusted infrastructure \\nand hash-based signatures instead of asymmetric key-based ones. Guardtimes KSI is a very different technology than other blockchain platforms, with some \\nbenefits and drawbacks as compared to other blockchain systems. 16 Table 3. Guardtime Pros and Cons Pros Cons 1. Extremely fast signature processing and \\nverification 2. Immutable time-stamping of signatures \\n3. Does not require permission to use the blockchain \\n4. Its security comes from minimal assumptions (mostly the cryptographic \\nproperties of hash functions) 5. Quantum resistant 1. Proprietary \\n2. Requires trusted infrastructure of signer nodes to sign data \\n3. Does not store data on the blockchain, only signatures of the data \\n4. While verifying a given signatures presence is easy, searching for a given \\nsignature is hard/impossible Emerging Features \\nBlockchain technology is advancing at a very fast pace. There are a few features currently in \\ndevelopment across several open-source communities that will be of value to future \\npermissioned blockchain applications. 8.1 Private Transactions \\nBlockchains were originally intended to be publicly auditable. Therefore, all information stored \\non the ledger (transactions and state) are readable by anyone with access to a node. Recently, a \\nfew public blockchains such as Zcash and Monero were developed to protect the privacy of \\ntransactions between parties by shielding the contents of a cryptocurrency transaction to \\neveryone but the parties involved. Privacy of transactions in a permissioned blockchain is one of the most desired features for \\nenterprise users, but production-level support is generally lacking in most permissioned \\nblockchains. The Quorum blockchain outlined in section 7.2 provides support for private \\ntransactions. And there is active interest in using sophisticated cryptographic techniques already \\nused by Zcash known as Zero-Knowledge Succinct Non-Interactive Argument of Knowledge \\n(zk-SNARKS) (Non-Interactive Zero-Knowledge Proof, 2017). Support for adding zk-SNARKS \\nto Ethereum is currently under development. 8.2 State Channels \\nBlockchain transaction throughput is not nearly at the level of speed that most enterprise users \\nare accustomed to with traditional database technology. This is due",
  "updated_at": "9/15/2015 12:00:00 AM",
  "created_at": "5/20/2013 12:00:00 AM"
}