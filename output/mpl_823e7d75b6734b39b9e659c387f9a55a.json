{
  "sdl_source_type": "MPL",
  "productName": "equator helpful",
  "uploadedate": "2020-08-02T00:00:00",
  "productUrl": "http://Malamud.com",
  "creatorNames": "Rim v Argerey;Zijian m Jimenez De Los Galanes;Joussef s Montesa;Ellen q Burgaleta",
  "uploaded": "2015-02-11T00:00:00",
  "sdl_extracted_summary": "to be executed on the victim's system/network (a \\ncyber weapon typically a piece of malware, but in the context of supply chain attacks \\ncould also be a tainted software component such as a Dynamic-Link Library (DLL) file or \\na subverted operating system (OS), a tainted data file, a hardware component which \\nincludes malicious logic); Deliver the cyber weapon is delivered to the target system; Exploit the cyber weapon takes advantage of a vulnerability in the target system to \\ninstall malware; Control the initial installed malware establishes a command and control (C2) channel \\nto the adversary if necessary, and malware propagates from the initial target system more \\nbroadly; Execute the adversary achieves the desired cyber effect (which can in turn result in a \\nmission impact); and Maintain long-term access is preserved. Figure 2. Cyber Attack Lifecycle Figure 2 shows a single, linear version of the CAL with one end goal and one successful exploit. \\nHowever, these attack stages are completed multiple times across the acquisition lifecycle, \\ntargeted at different systems. Within each phase of the acquisition lifecycle, there are systems and \\ninformation that can be leveraged by the adversary to attack systems and information in \\nfollowing phases of that lifecycle. For example, the adversary may attack a Program Office \\nsystem, resource or information in the Materiel Solutions Analysis and Technology Maturity and \\nRisk Reduction phase to perform reconnaissance and/or start to weaponize (create an exploit for \\nlater use.) Then, using that information or weapon created, the adversary could execute \\nanother attack on the integration contractors systems in a later phase of the acquisition lifecycle \\nsuch as the Production and Deployment phase. In this case the adversary has cycled through at \\nleast two complete CALs as part of the larger CAL directed at the operational mission.\\nOther forms of a CAL have been defined. In particular, the Office of the Director of National \\nIntelligence (ODNI) has published its Cyber Threat Framework (CTF) [11]. The CTF defines \\nfour broad stages of adversary actions: Preparation, Engagement, Presence, and Effect / \\nConsequence5; these were used in the DSB Report on Cyber Supply Chain. However, the CTF xii does not provide enough granularity with respect to the immediate consequences of adversary \\nactions to enable us to analyze which cyber resiliency techniques could be effective against those \\nactions. In addition, the structure of a cyber campaign illustrated above is consistent with NIST \\nSP 800-30R1 [12] and the DoD Guidelines for Cybersecurity Developmental Test and Evaluation \\n(DT&E) [12]. We therefore use the seven-stage CAL illustrated above in Section 3, which \\nprovides a good representation of a cyber campaign used across the acquisition lifecycle. xiii 6 The words in parenthesis come from [10]. Adversary Goals in the Context of the Cyber Attack and 3\\nAcquisition Life Cycle This section details the adversary goals and how an adversary might leverage the CAL at \\ndifferent phases of the acquisition life cycle to impact the operational system and overall mission. \\nIt also identifies that the goal of achieving persistence of the weapon on the operational \\nenvironment without detection is a strong motivator for the adversary to use the supply chain as \\nentry onto an operational network. The CAL is recursive and therefore each stage of the \\nacquisition life cycle can be targeted by an adversary and the entire CAL can be executed within \\nany or all of acquisition lifecycle phases. This document is focused on showing the bigger \\npicture of how the CAL is used over the entire acquisition lifecycle, the impact on the Operations \\nand Support phase of the acquisition lifecycle, and the cyber resiliency mitigations that can be \\napplied to reduce or eliminate these impacts. This focus does not imply that addressing the full \\nCAL within each acquisition lifecycle phase is unnecessary or not as useful; it is just not the \\nfocus of this paper. Primary Goals3.1\\nAn adversary using supply chain attacks against a mission system can have any of a variety of \\ngoals, related to the mission, to the information handled by the system, or to the role of the \\nsystem or mission in a larger context [14]. In the abstract, the primary goal of the adversary is to \\nimpact confidentiality, integrity, and/or availability (CIA) of an end system and, ultimately, the \\nmission it supports. To accomplish this, the adversary carries out the stages of the CAL (e.g., \\nexploit, control, execute, and maintain), as referenced in Section 2.4, above. This means our \\nanalysis approach may be applied to a wide range of missions. Possible cyber effects6 on the \\nmission system include: Violate Confidentiality (intercept): gain unauthorized access to information; Reduce Integrity (modify, fabricate): cause the system to malfunction; cause end users to \\nmistrust the information and information system; or cause end users to do unintended \\nthings (e.g., friendly fire); Reduce Availability (degrade, interrupt): making the system and information or resource \\nunavailable when it is needed; or, Use resources for illegitimate purposes (unauthorized use or usurpation): use for \\npotentially harmful reasons and violate the confidentiality, integrity, or availability of \\nother resources that trust the information asset being attacked by the adversary (as they \\ndont know it is compromised). In line with the focus of this analysis on Operations and Support, this section describes what an \\nadversary wants to achieve in each stage of the acquisition life cycle in order to exploit the final \\nmission system. \\nIt is recognized that adversaries will also attack systems within each life cycle stage. Systems \\nand environments, for example those that produce system design requirements or support \\nacquisition and development of a final mission system, are subject to attack. Many of the cyber \\nresiliency techniques recommended here can also be applied to systems whose mission is to xiv develop, purchase or maintain another operational mission system. Achieving Goals by Actions Taken throughout the Acquisition Life 3.2\\nCycle As identified by our analysis of supply chain attacks, attacks are most effective when started in \\nearlier stages of the acquisition life cycle [3] and continue through all stages to Operations and \\nSupport. For example: During the Materiel Solution Analysis Phase and the Technology Maturity and Risk \\nReduction Phase, the adversary is focusing on Reconnaissance that is, finding out as \\nmuch as possible about the mission needs, functional requirements, and expected \\ntechnical architecture of the mission system for later use. The adversary is mainly \\ntargeting the Program Office during this phase. In the Engineering & Manufacturing Development phase and the Production & \\nDeployment phase, the adversary is doing more reconnaissance, developing weaponized \\ntools, delivering them to the environment and executing the initial exploit (getting their \\nhooks into applications and systems). The adversary is mainly targeting contractor \\nsystems (both prime and subcontractor) during this phase If the adversary attack is successful, during the Production & Deployment phase and the \\nOperations & Support phase the adversary achieves their goal of controlling weaponized \\ntools, executing the attack and maintaining their presence for further attacks. During this \\nphase the adversary is targeting contractor systems, integrator facilities, software and \\nhardware development, as well as the physical flows and information flows. Figure 3 below is a representation of the ways an adversary moving through the stages of the \\nCAL might interact with the acquisition lifecycle. An individual adversary attack may not \\nnecessarily target each acquisition phase using every stage in the CAL shown in ; however, since \\neach acquisition phase could be targeted as part of an extended campaign against the final \\nmission system, resilience against those attacks and adverse effects should be considered within \\nthat acquisition phase. This mapping reflects stages in the acquisition lifecycle where the \\nadversary will focus their efforts to achieve their desired CAL objectives, rather than a \\ndescription of a specific attack flow. The adversary may choose to go beyond these focus areas. \\nA different perspective of the acquisitions-CAL relationship is shown in Table 2 below. xv Figure 3. Cyber Attack Lifecycle in the Context of the Acquisition Lifecycle For the remainder of this paper, the adversary goals with respect to the mission system will be \\nreferenced as shown in the Table 1. below. This allows for a clearer understanding and \\napplication of the CAL to the action an adversary wants to achieve in that stage of a supply chain \\nattack. Table 1. Cyber Attack Lifecycle and the Associated Adversary Goals Recon Weaponize Deliver Exploit Control Execute Maintain Acquire \\ninformation Develop \\ntools for \\nattack (craft \\na cyber \\nweapon) Deliver \\nthe \\ncyber \\nweapon Take advantage \\nof a \\nvulnerability to \\ninstall the cyber \\nweapon, making \\nit part of the \\nmission system Control the \\nattack in the \\nmission \\nsystem \\nenvironment Achieve the \\nintended \\neffects on \\nthe mission \\nsystem Maintain \\npresence \\nfor future \\nattacks The Table 2 below shows the actions the adversary wants to accomplish (goals) for each phase of \\nthe acquisition life cycle and each stage of the CAL with example target systems listed. To \\naccomplish these goals, the adversary would execute the full CAL against the target system(s). Table 2. Adversary Goals, the Acquisition Lifecycle and the Cyber Attack Lifecycle Acquisition \\nLifecycle Phase Associated \\nCyber Attack \\nLifecycle Stage Target System Examples Adversary Goals",
  "sdl_date": "2020-08-17T00:00:00",
  "countryPublished": "Afghanistan",
  "conference": "confection groomed qy Rod",
  "originalAuthorName": "Cornelia l Mohnatkin",
  "title": "embalmer cowardliness's",
  "declaredTags": "testing|Terminal Area Forecast|ND filter|Changi Airport",
  "releaseReason": "concomitant/Librium's",
  "docName": "TE_14_1859",
  "fundingCenter": 60,
  "resourceURL": "https://Gascony.com",
  "fundingDepartment": "on97",
  "caseNumber": "93-9870",
  "publicationDate": "1/14/2020 12:00:00 AM",
  "releaseYear": 2015,
  "releaseStatement": "Peer-reviewed Publication/Journal",
  "approver": "$Guo $Payas",
  "handCarry": 1,
  "authorDivision": "jc89",
  "copyrightOwner": "Lain Gois",
  "lastModifiedDate": "9/5/2001 12:00:00 AM",
  "releaseDate": "7/2/2002 12:00:00 AM",
  "onMitrePublicSrvr": 0,
  "projectNumber": "7597BJOK49",
  "materialType": "Article",
  "publicationType": "Paper",
  "authorCenter": 15,
  "originalAuthorID": "Particia",
  "mitrePublicServer": 0,
  "subjectTerminology": "Systems Engineering (General)",
  "dateEntered": "5/8/2014 12:00:00 AM",
  "documentInfoURL": "https://worshiped Ferber quashing agribusiness Grendel's.com",
  "softShell": 0,
  "publishedOnNonMITREServer": 0,
  "priorCaseNumbers": "CASE1: 18-0935|CASE1: 15-3140|CASE1: 16-0818|CASE1: 18-1446",
  "organization": "re83",
  "authorDepartment": "qa72",
  "publicationYear": 2007,
  "sensitivity": "Public",
  "copyrightText": "(c) 2016 The MITRE Corporation All Rights Reserved",
  "fundingSource": "CAMH FFRDC Contracts",
  "level1": "MITRE National Security Sector",
  "fundingDivision": "Shillong's chiropractor's abrades scrubs naphtha",
  "publishedOutsideUSA": 0,
  "level3": "ns94",
  "level2": "qh29",
  "sdl_id": "823e7d75b6734b39b9e659c387f9a55a",
  "text": "    \"text\": \" blockchain_tech_report_final_2018 Blockchain Technology for \\nGovernment Authors: Dave Bryson \\n Dave Penny \\n David C. Goldenberg \\n Gloria Serrao \\nDecember 2017 MT R 18 00 46 MIT R E T E C H N I C A L R EPO R T Project No.: 10MSRF18-AA \\nThe views, opinions and/or findings \\ncontained in this report are those of \\nThe MITRE Corporation and should \\nnot be construed as an official \\ngovernment position, policy, or \\ndecision, unless designated by other \\ndocumentation. \\nApproved for Public Release; \\nDistribution Unlimited. Case \\nNumber 18-1069 \\n \\nALL RIGHTS RESERVED. ii Approved By iii iv Abstract \\nThis document presents an introduction to blockchain technology with a specific focus on the \\ncore technologies, platforms, and applications that may be beneficial to MITREs government \\nsponsors. The document is intended to introduce MITRE and its sponsor to blockchain \\ntechnology, and establish a base of knowledge upon which to further explore MITRE sponsor \\nblockchain use cases and research. An introduction to blockchain and its critical components \\nincluding cryptography, consensus, and distributed ledgers is provided. Public and permissioned \\nblockchains are compared, and a framework is provided that outlines when it is beneficial to use \\nblockchain solutions. Use cases applicable to MITRE sponsors such as healthcare, identity, \\nsupply chain, and the Internet of Things (IoT) are considered. A survey of leading permissioned \\nblockchains such as Ethereum and Tendermint is presented, and important emerging features \\nsuch as private transactions and state channels that strengthen enterprise blockchains are \\ndiscussed. v vi Executive Summary \\nBlockchain technology is evolving at a very rapid pace. Understanding the core components of \\nthe technology and how they work together is critical to tracking the state of the art. While each \\ncomponent plays a critical role in the technology stack, consensus is at the heart of the system \\nand important to understand. Carefully choosing the right consensus algorithm based on the \\ndesired level of trust and security will be critical to a successful blockchain application. While public blockchains provide the most security as they are designed to operate in a trust-less \\nenvironment, government users will be most interested in a permissioned blockchain. However, \\nthe nature of a permissioned blockchain requires careful planning and governance to establish \\nthe parties participating in the consensus process. Without proper governance, there may be a \\npossibility of politically centralizing some of the key functionality of the blockchain, limiting its \\ncapabilities, and providing a false sense of security. As more look to permissioned blockchains to modernize traditional applications, there are \\nseveral requirements that need to be addressed. For example, privacy and confidentiality on the \\nblockchain, transaction scalability, and blockchain-to-blockchain connectivity. While theres \\nongoing active research in these areas across several open-source communities, permissioned \\nblockchains need to further evolve to fully meet the needs of the government user. vii Table of Contents 2.1 What a Blockchain Does \\n2.2 How it Operates \\n3.1.1 Hash Function \\n3.1.2 Digital Signature \\n3.2.1 Proof of Work (Nakamoto Consensus) \\n3.2.2 Byzantine Fault Tolerant (BFT) Consensus \\n3.4 Smart Contracts \\n3.5 Peer to Peer Network \\n3.6 Typical Transaction Flow \\n4.2 Permission Blockchain \\n6.2 Identity \\n6.3 Supply Chain and Logistics \\n6.4 Internet of Things \\n7.2 Quorum \\n7.3 Tendermint \\n7.4 Hyperledger Fabric \\n7.5 Guardtime \\n8.2 State Channels \\n8.3 Bulk Data Storage \\n8.4 Connecting Blockchains \\nFigure 1. Blocks are Linked by the Hash of Their Contents. \\nFigure 2. Following a Transaction Through the Blockchain (Blockgeeks, 2017). \\nFigure 3. Blockchain Decision Chart (IEEE: Do you need a blockchain). \\nTable 1. Consensus Comparison. \\nTable 2. Public vs. Permissioned Blockchain. \\nTable 3. Guardtime Pros and Cons \\nIn 2009, a developer (or developers) by the name of Satoshi Nakamoto created an electronic \\npayment system named Bitcoin (Nakamoto, 2009). The goal of Bitcoin was simple: allow two \\nparties to directly exchange a digital currency without the need for a trusted 3rd party (e.g., a \\nbank) to mediate the transfer. Over the past eight years, Bitcoin has grown to be one of the most \\nsuccessful cryptocurrencies. It has also proved to be one of the first public-facing, fault-tolerant \\ndistributed systems capable of operating in an adversarial environment. As of 2017, there are over 1000 different cryptocurrencies, many based on Bitcoin, with a \\ncombined market capitalization approaching $1 trillion. (CoinMarket Cap, 2017). The success of \\nBitcoin and the emergence of new platforms such as Ethereum that offer programmable smart \\ncontracts, is pushing the technology beyond the cryptocurrency use case and driving the growing \\ninterest in blockchain technology. The level of interest is especially high in enterprise applications. The recently formed Ethereum \\nEnterprise Alliance (Enterprise Ethereum Alliance, 2016) and the open-source Hyperledger \\nproject (Hyperledger, 2017) now have hundreds of members across a broad spectrum of Fortune \\n500 companies. Virtually every major software vendor is offering services and consulting on \\nblockchain technology. What is a Blockchain? \\nA blockchain can be compared to a bank ledger containing transactions. It provides information \\nabout the date, time, and amount of money or other property of interest changing ownership. \\nOnce transactions are written to the ledger, they are permanent; they cant be changed or deleted. \\nTransactions are bundled into blocks and these blocks are linked to form the ledger, which is \\ncalled blockchain. A blockchain is distributed over multiple nodes using an underlying peer-to-\\npeer (P2P) network protocol for node discovery and communication. The components of blockchain are discussed in detail in Section 3, but are briefly described \\nbelow for context. Cryptography: hash functions that link blocks together providing integrity of the chain \\nand digital signatures providing integrity for the transactions. Consensus Algorithm: The process by which parties to a blockchain decide on the \\nordering and presence of transactions on the ledger. Distributed Ledger: A distributed, replicated, representation of all transactions \\n P2P Protocol: The protocol that manages the peer nodes of the network that support blockchain. Performs communication between nodes, flow control, node discovery, and \\nframing. Smart Contracts: business rules or logic that can extend the functionality of a blockchain 2.1 What a Blockchain Does \\nAt its core, a blockchain enables a network of peer computers (or nodes) to validate, settle, and \\nagree on a record of transactions. It establishes a form of trust between parties that may not \\notherwise trust each other, and does so without relying on traditional centralized services, or \\ntrusted 3rd parties. This new form of decentralized trust has generated interest with users across a \\nwide range of domains. Companies are investing research and development efforts into 2 blockchain technology, with the hopes of revamping existing processes to reduce cost while \\nimproving security, accountability, and transparency. 2.2 How it Operates \\nA blockchain is a replicated state machine. A given state is synchronized across a set of \\nmachines, or nodes, such that these nodes function as a single machine, despite the potential that \\nsome will fail either through normal faults or malicious activity. The state of a blockchain is driven by incoming transactions, each transaction causing a state \\ntransition. What the state represents depends on the goal of the blockchain. In the case of \\ncryptocurrency, the state is the balance of accounts, while in an enterprise blockchain, the state \\nmay represent other forms of information. A transaction can be thought of as the fundamental unit of work in a blockchain. It is the input to \\nthe system, an atomic operation, that drives a state transition. It either succeeds and updates the \\nstate of the system, or it fails and is ignored. A transaction is redundantly verified by every \\nblockchain node in the network and multiple transactions are batched into blocks for efficient \\nprocessing. The consensus protocol enables all nodes to agree on the transactions in a block and the order of \\nthe blocks ensuring identical copies of the blockchain are stored on every machine. These new \\nblocks are cryptographically linked to the prior block to prevent them from being altered once \\nagreed upon. The combination of a tamper-proof transaction log and a deterministic state \\ntransition ensures that all machines can compute the same state given the same transaction log. Key Components of a Blockchain 3.1 Cryptography \\nA blockchain relies on two cryptographic primitives for many of its security properties: \\ncryptographic hash functions and digital signatures. 3.1.1 Hash Function \\nA cryptographic hash function is a mathematical function that takes in an input string of any size \\nand produces a fixed sized output. Cryptographic hash functions have two main properties that \\nare used to secure blockchains. 1. It is possible to efficiently compute the hash function in the forward direction; however, \\nits nearly impossible to compute the inverse of the hash function. In other words, its \\ninfeasible to learn any valid input from the output hash. 2. Small changes in the input to a hash function result in large and unpredictable changes in \\nthe output. As an example of the above two properties, using the SHA-256 hash function, \\nwe can create a unique fingerprint of the word HELLOWORLD: sha256(HELLOWORLD) = \\n'0x0b21b7db59cd154904fac6336fa7d2be1bab38d 49584068cdcb74' The hash of the word results in a 256-bit value and it will always be the same value given \\nthe same input. However, given the 256-bit",
  "updated_at": "5/17/2009 12:00:00 AM",
  "created_at": "10/6/2003 12:00:00 AM"
}