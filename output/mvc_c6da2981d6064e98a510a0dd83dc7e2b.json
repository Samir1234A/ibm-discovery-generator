{
  "sdl_source_type": "MVC",
  "project_name": "mwo",
  "project_sponsor": "mlksjqpkev-5764",
  "project_end": "2004-06-20T00:00:00",
  "portfolio": "luxury's engage",
  "super_portfolio": "SAT",
  "sub_portfolio": "jpe - writs Sikhism",
  "clarify": "Cancelled",
  "project_url": "http://trolleys.com",
  "project_page_charge_code": "897XUMT",
  "project_leader": "Dahou Y Marshansky",
  "sdl_date": "2020-01-08T00:00:00",
  "countryPublished": "Latvia",
  "conference": "Clytemnestra capsuling ni Shabnam",
  "originalAuthorName": "Stoyko c Neymann",
  "title": "riddle panhandles inequality's traipsed",
  "declaredTags": "TBO|rollup function|Accessible Communications for Everyone Direct|STAR|organizational restructuring",
  "releaseReason": "Rabelaisian's/segregated",
  "docName": "KR_15_9217",
  "fundingCenter": 82,
  "resourceURL": "https://perniciously.com",
  "fundingDepartment": "ao48",
  "caseNumber": "77-5300",
  "publicationDate": "1/11/2020 12:00:00 AM",
  "releaseYear": 2009,
  "releaseStatement": "Academic Program Submission",
  "approver": "$Sundas $Clavell",
  "handCarry": 5,
  "authorDivision": "re77",
  "copyrightOwner": "Angelika Ropple",
  "lastModifiedDate": "3/7/2004 12:00:00 AM",
  "releaseDate": "7/28/2015 12:00:00 AM",
  "onMitrePublicSrvr": 0,
  "projectNumber": "5287DDCK97",
  "materialType": "Article",
  "publicationType": "Article",
  "authorCenter": 21,
  "originalAuthorID": "Enguia",
  "mitrePublicServer": 0,
  "subjectTerminology": "Information Security (General)",
  "dateEntered": "5/31/2012 12:00:00 AM",
  "documentInfoURL": "https://tuberous harassed puttering electrodes slaughterhouse.com",
  "softShell": 0,
  "publishedOnNonMITREServer": 0,
  "priorCaseNumbers": "CASE4  14-0961|CASE1: 16-0123|CASE2: 17-1490|CASE1: 17-3768",
  "organization": "ii68",
  "authorDepartment": "fr96",
  "publicationYear": 2017,
  "sensitivity": "Public",
  "copyrightText": "(c) 2016 The MITRE Corporation All Rights Reserved",
  "fundingSource": "Non-Sponsored",
  "level1": "Corporate Ops & Transformation",
  "fundingDivision": "Lyndon fuses delving autoworker's Deloris's",
  "publishedOutsideUSA": 0,
  "level3": "bh62",
  "level2": "fs55",
  "sdl_id": "c6da2981d6064e98a510a0dd83dc7e2b",
  "text": "to IC. These tokens also appear in the system audit logs, if an audit subsystem is added. The self-loop channels 8, 9 allow QC and AC to signal certain internal events. The only other channel needing explanation is 6. At the beginning of processing any query, QC uses channel 6 to request the current maximum record number from AC, which maintains this. QC then limits all records retrieved to ones below this maximum. Hence, even when new records are being deposited by PR and IG concurrently, the query elicits consistent information reflecting the state of the database at the time of that maximum record number. Channel 12 is used only to propagate the maximum query time (shown as m in Fig. 2) to the ingress controller. Again, the functional correctness criterion for this system is just that the same local runs should be possible on its two external interfaces, and with the same compatibility relations Jt3ut1,2upDq.\\n1 The practical requirement for the 1 By an interface, we just mean a set of channels, often but not necessarily near each other in the graph. A1 1 ++\\nQC 2 kk 4 8 6 ++ 10\\n$$ AC 7 kk 9 12 ++\\nIG13kk 14{{ PR\\n3oo AU 5 JJ IC 11 OO Fig. 4. Refined architecture for EpiDB system designer to meet is that the index and archive controllers IC,AC should cooperate to maintain the database accurately, which is well understood. The interface-preserving refinement principle. This refinement strategy is simple and easily formalized. When F1, F2 are frames, we write J\\ni\\nCDpq for the compatibility function in Fi. Theorem 3. Suppose that F1 and F2 are two frames, and C,D CH1 X CH2. If D-runs1 D-runs2, and for all D P D-runsi, J\\n1\\nCDpDq J 2\\nCDpDq, then: 1. F1 -limits C-to-D flow iff F1 -limits C-to-D flow;\\n2. F1 answers Q for D iff F2 answers Q for D. This follows directly from the forms of the definitions. However, it is useful. For instance, it immediately follows that the properties of the system are preserved in case the system serves more than one analyst. In Fig. 5, we present an augmented system containing multiple analysts. However, since the behaviors on the interfaces 1, 2 and 3 are unaffected, Thm. 3 immedi- ately entails that the augmented system continues to meet its goals for A1. By symmetry, it meets the same goals for the other Ai. As another example, the system we have described has no audit mechanism built in. However, having designed the system and established its information flow properties, we can add nodes and channels to perform audit without chang- ing the local runs and compatibility functions for the interfaces 1, 2 and 3. This A2 A3 vv A1 1 ++\\nQC 2 kk JJ 66 4 6 ++ 10\\n$$ AC 7 kk\\n12 ++ IG13kk 14{{ PR\\n3oo AU 5 JJ IC 11 OO Fig. 5. EpiDB augmented with multiple analysts. Channels 8, 9 omitted as clutter provides a clear argument for orthogonality of design that has sometimes eluded secure systems methodology. 6 Conclusion We have discussed the frame model, and illustrated how to use it to establish what-declassification policies, or information flow upper bounds. The same ideas lead to a natural approach for showing lower bounds, i.e. that a system really answers questions which may be posed on one of these interfaces. However, the frame model gives an abstraction of a possible system: How can one determine that an actual system displays the structure and behavior of a given frame as designed? In particular, two central items are needed. First, the active components of the actual system should correlate with the nodes of the frame. The behaviors of each component should conform to the lts of the\\ncorrelated node. Second, the message-passing activity of the system should occur along channels identified in the frame. There should be no other interactions, whether between components of the system or between components and the external world. Similarly, to build a real system using a frame as specification, one needs, first, a way to build local programs that conform to an lts specification, and various\\nfamiliar ideas such as reactive programming and event-handling libraries appear helpful. In any case, the programming here is purely sequential and independent of any shared state interactions. How then to establish, second, that the components interact with each other, and only with each other, as specified in the graph? This requires cryptographic support, both for secrecy to ensure that messages between components canot leak to the external world, and for authenticity to ensure that a component cannot receive a message off a channel unless its peer transmitted onto the channel. A protocol is needed also to ensure that message passing approximates the synchronous semantics the model uses. Indeed, there is an additional role for cryptography, which is to provide at- testation, i.e. digitally signed evidence that a node is genuine and under the control of the expected code. The Trusted Platform Modules were intended as an anchor for this sort of evidence, and user-level trusted execution environments (TEEs) such as Intels Software Guard Extensions provide a simpler framework for achieving attestations [5]. TEEs provide symmetric cryptographic support to protect a thread and local memory, encrypting pages as they leave the pro- cessors cache. Moreover, the processor provides digital signatures that attest to the code in control of the TEE. These attestations allow components to validate one another, to ensure that they are affiliated in the pattern stipulated in their model. The attestations also allow an external party to decide to believe this also, before making a decision as to whether to deliver data into the system, or accept it from the system. Thus, in addition to hardware support, we need to be able to use cryptographic protocols in the right way; another area in which A. W. Roscoe has also made his contributions. Acknowledgments. I am grateful to Paul D. Rowe and John D. Ramsdell, with whom I discussed many of these ideas. In particular, John Ramsdell worked out the successive frame versions summarized in the figures. References 1. Riccardo Focardi and Roberto Gorrieri. The compositional security checker: A tool for the verification of information flow security properties. IEEE Transactions on Software Engineering, 23(9), September 1997. 2. Riccardo Focardi and Roberto Gorrieri. Classification of security properties. In Foundations of Security Analysis and Design, pages 331396. Springer, 2001. 3. Joseph A. Goguen and Jose Meseguer. Security policies and security models. In IEEE Symposium on Security and Privacy, 1982. 4. Joshua D. Guttman and Paul D. Rowe. A cut principle for information flow. In IEEE Computer Security Foundations. IEEE Computer Society Press, July 2015. 5. Intel. Intel Software Guard Extensions (Intel SGX). https://software.intel. com/en-us/sgx, 2016. 6. Jeremy Jacob. Security specifications. In IEEE Symp. Security and Privacy, pages 1423. IEEE Computer Society, 1988. 7. Carroll Morgan. The shadow knows: Refinement of ignorance in sequential pro- grams. In Mathematics of program construction, pages 359378. Springer, 2006. 8. A. W. Roscoe. CSP and determinism in security modelling. In IEEE Security and Privacy, pages 114127. IEEE, 1995. 9. A. W. Roscoe. The Theory and Practice of Concurrency. Prentice-Hall, 1997. 10. A. W. Roscoe and M. H. Goldsmith. What is intransitive noninterference? In 12th IEEE Computer Security Foundations Workshop, pages 228238. IEEE CS Press, June 1999. 11. A.W. Roscoe, J.C.P. Woodcock, and L. Wulf. Non-interference through determin- ism. Journal of Computer Security, pages 2753, 1996. 12. John Rushby. Noninterference, transitivity, and channel-control security policies. SRI International, Computer Science Laboratory, 1992. 13. P. Y. A. Ryan. A CSP formulation of noninterference and unwinding. In IEEE CSFW 3, June 1990. 14. Andrei Sabelfeld and David Sands. Declassification: Dimensions and principles. Journal of Computer Security, 17(5):517548, 2009. 15. David Sutherland. A model of information. In 9th National Computer Security Conference. National Institute of Standards and Technology, 1986. https://software.intel.com/en-us/sgx\\nhttps://software.intel.com/en-us/sgx Information Flow, Distributed Systems, and Refinement, by Example \",",
  "updated_at": "7/9/2000 12:00:00 AM",
  "created_at": "9/23/1992 12:00:00 AM"
}