{
  "sdl_source_type": "PWS",
  "source_library": "SRC-squirm's",
  "file_name": "orphanages.ext",
  "document_url": "http://Beria'sreexamining.com",
  "uploaded_by": "Llum j Hortmanns",
  "last_modified": "6/8/2002",
  "sdl_date": "2020-12-01T00:00:00",
  "countryPublished": "United Kingdom",
  "conference": "interval housebroke ed Tad",
  "originalAuthorName": "Jann y Sagardui",
  "title": "disturbs",
  "declaredTags": "Trajectory Based Operations|big data|concepts|controlled synthetic\\nenvironment",
  "releaseReason": "chieftains/congratulates",
  "docName": "EI_85_8165",
  "fundingCenter": 84,
  "resourceURL": "https://mellowness.com",
  "fundingDepartment": "cy61",
  "caseNumber": "25-8716",
  "publicationDate": "6/19/2017 12:00:00 AM",
  "releaseYear": 2005,
  "releaseStatement": "Academic Program Submission",
  "approver": "$Dean $Incertis",
  "handCarry": 3,
  "authorDivision": "tk53",
  "copyrightOwner": "Alcira Harger",
  "lastModifiedDate": "3/25/2009 12:00:00 AM",
  "releaseDate": "12/2/2020 12:00:00 AM",
  "onMitrePublicSrvr": 0,
  "projectNumber": "5254JXYY94",
  "materialType": "Article",
  "publicationType": "Paper",
  "authorCenter": 87,
  "originalAuthorID": "Taida",
  "mitrePublicServer": 0,
  "subjectTerminology": "Communications Technology (General)",
  "dateEntered": "1/10/2005 12:00:00 AM",
  "documentInfoURL": "https://tyranny resold rune musician's Lehman's.com",
  "softShell": 0,
  "publishedOnNonMITREServer": 0,
  "priorCaseNumbers": "CASE3  18-2300|CASE1: 17-2336|CASE1: 17-3245|CASE1: 16-4753",
  "organization": "oo94",
  "authorDepartment": "gd41",
  "publicationYear": 2000,
  "sensitivity": "Public",
  "copyrightText": "(c) 2016 The MITRE Corporation All Rights Reserved",
  "fundingSource": "IRS and VA FFRDC Contracts",
  "level1": "MITRE Legacy",
  "fundingDivision": "inauspicious Ben hearkened melange's laburnum's",
  "publishedOutsideUSA": 0,
  "level3": "cy89",
  "level2": "ti94",
  "sdl_id": "2f317bc1298248b28373eb79c2fbbf1e",
  "text": "than two nodes. Hypergraphs are very useful for \\nmodeling social networks where entities can belong to more than one group. For example, families in \\na Approved for Public Release; Distribution Unlimited. Case Number 18-1212 / DHS reference number 17-J-00100-01 Mittal, Cane, Schmidt, Tufarolo and Harris large community can be represented by a hypergraph (Newman 2010): One person can be in a family and \\nin a community, and another person in the same community but in a different family. Almost all complex natural systems display many-to-many relationships characterizing them as non-linear \\nand consequently, difficult to model. Hypergraph analysis shows the multiple ways a particular node or \\ncomponent relates to other nodes. Hypergraphs, in a short span of two decades, have found applications in \\nwide variety of scientific fields. Disciplines employing hypergraph analysis include molecular chemistry, \\ntelecommunications, psychology, genetics, computer aided manufacturing, very large scale integrated \\n(VLSI) circuits, hierarchical complex systems and various human activities (Bretto 2013). Lately, it has \\nbeen applied to engineering information systems and social network analysis, where relationships are \\nsupra-dyadic (i.e. involving more than two participants, e.g. a financial transaction involves buyer, seller \\nand broker) and also in analyzing the partitioning and concurrent process design in a service-oriented \\narchitecture within a Cloud environment (Molnar 2014). A hyperedge within a hypergraph is the easiest \\nmethod to model multi-node relationships. Figure 2 contains an example of a hypergraph (Philippe Jgou a 2009). Overlaying a family example on \\nthis graph, nodes X15, X16,, in hyperedge e7 (upper right corner) are members of a family, but they are also \\nmembers of the hyperedge e5, which represents the community. Due to the IoT modeling problem complexity, and the preponderance of many-to-many relationships, we \\nposit the IoT model is best represented by a hypergraph. Mathematically, hypergraphs are expressed using \\nSet theory. However, this mathematical representation is not amenable for modeling purposes. There is a \\ndearth of tools supporting formal hypergraph modeling. System Entity Structure (SES) theory based on Set \\ntheory provides a means to model hypergraphs and thereby manage their inherent complexity. Figure 2: A Connected Hypergraph Figure 3: SES Application 4 SYSTEM ENTITY STRUCTURE (SES) HYPERGRAPH MODEL Hypergraph modeling is a complex endeavor with no rules to specify the structure. The SES theory (Zeigler \\n1984, Zeigler and Zhang 1989, Zeigler, Praehofer and Kim 2000) is a formal ontology framework to capture \\nsystem aspects and their properties. The underlying SES axioms provides the needed constraints to bring \\nstructure to the modeling process these axioms can be found in (Zeigler 1984). A complete SES model \\nformally describes a solution set containing all permutations and combinations available for modeling an \\nactual system. Figure 3 conceptualizes the SES modeling process (Mittal and Martin 2013). It shows the \\ncomplete solution set, represented by the large triangle, which represents the totality of a theoretical model. \\nFor each instantiation of the model, the theoretical model is pruned to only those elements required for the \\ninstance. Approved for Public Release; Distribution Unlimited. Case Number 18-1212 / DHS reference number 17-J-00100-01 Mittal, Cane, Schmidt, Tufarolo and Harris SES modeling semantics is constructed of the following elements: \\n Entity (a physical entity or a concept represented as a label);\\n Aspects (decomposition: is made up of): Denoted by a vertical bar ( | );\\n Specializations (can be of type: is a type of): Denoted by a double vertical bar ( || );\\n Multi-aspect (decomposition into similar type: is made up of many such): Denoted by a triple vertical bar ( ||| ). It also has a variable n, that specifies the number of entities in the relationship;\\nand Variables (each entity has variables that have a range and value): Denoted by ~. This research suggests SES framework can be applied to model hypergraphs in support of IoT modeling. \\nAs an example, consider the IoT-Inclusive System in Figure 4 represented as an SES. An IoT-Inclusive-\\nSystem is a general system having IoT-specific elements. Figure 4 can be read as follows. The IoT-\\nInclusive-System has two aspects; network aspect and physical aspect, labeled net-asp and phy-asp \\nrespectively. These aspects are realized as the entities Network and Things. The Network entity has a \\nconnectivity-asp aspect, which includes the entities Connections and Resources. Connections entity consists \\nof many Connection entities. A Connection can be specialized using the connect-mode-spec into Wired or \\nWireless entities. A Connection entity through the connect-protocol-aspect has a Communication Protocol. \\nA Communication Protocol entity can be specialized using the protocol-spec into IP, Bluetooth, ZigBee or \\n802.x entities. Things are comprised of many LogicalDevice entities. The multi-aspect Things and\\nConnections contain millions of Things and millions of Connection entities. Together with all the choices, the \\nIoT-Inclusive-System SES represent \\nall the possible architectures at a \\nvery high level of abstraction for a \\ntechnology-only solution. From the \\npermutation and combinations \\nperspective, for example, assuming \\nwe have 10 Things and 50 \\nconnections between these 10 things \\n(although a total of 100 connections \\nare possible), there are about 4000 \\nconfiguration options possible for \\nIoT-Inclusive System (2 Connection \\nx 4 Communication Protocol x 10 \\nThings x 50 Connection). For \\nbrevity, Resources entity is not \\ndescribed in this example. Figure 4: Notional IoT Inclusive System 4.1 Pruned Entity Structure (PES) Hypergraph Model SES has been shown to work as an ontological framework and is typically used to lay out the design space \\nfor complex information systems. Each configuration option in the design space may be applied to a specific \\nuse-case and thereby specify the needed architecture (Zeigler and Hammonds 2007, Mittal and Martin \\n2013). To systematically explore varying implementation options for specific use-cases (a.k.a. scenarios), \\nthe complete SES model is pruned into only the essential elements relating to the scenario. The resulting \\nSES is called a Pruned Entity Structure (PES). The SES allows coverage of all the semantic permutation \\nand combinations available for articulating any particular system in a formal manner. The PES can be \\ncontinuously pruned to reduce the available options to get closer to the problem-at-hand. Figure 5 shows Approved for Public Release; Distribution Unlimited. Case Number 18-1212 / DHS reference number 17-J-00100-01 net-aspect connectivity-\\naspect Connections Resources connection-mutiasp Connection connect-\\nmode-spec Wireless Wired connect-\\nprotocol-aspect Communication\\nProtocol ~ range Network protocol-\\nspec IP Bluetooth ZigBee 802.x phy-aspect ld-multi-aspect LogicalDevice Things IoT-Inclusive-System ~ n=millions ~ n=millions spec entity aspect multi-aspect ~ variable Is-made-of: Used for Decomposition (AND) Is-type-of: Used for options/choices (OR) Of-many-such: Used for many of same type (AND) A physical or virtual object A variable that has a range of values LEGEND Mittal, Cane, Schmidt, Tufarolo and Harris the pruning process. The resulting PES acts as a Reference Architecture, as it provides enough constraints \\nto represent the particular domain within a family of architectures. Figure 5: PES generation through an iterative process (Mittal and Martin 2013) The IoT-Inclusive System design space shown in Figure 4, when pruned for a specific use, such as 10 \\nThings and 50 Connections, yields the PES in Figure 6. Note the options have been reduced to actual \\ncomponent numbers. Once we have the PES, various use-cases can be constructed allowing entity \\nnavigation with the PES. An execution of a use-case involving entities in SES is called a Walk. This is \\nanalogous to a Graph Theory walk as described in Section 2 for Figure 1. Figure 6 shows a walk with two \\nLogicalDevices communicating over the Network. This walk is represented as a sequence of numbers on \\nthe PES entities. As a PES still contains a lot of permutations, a walk in PES is a higher level of abstraction. \\nAs the PES is continuously pruned (Figure 5), it eventually leads to a very specific implementation: an \\narchitecture of the IoT-Inclusive System with explicit components. This transforms PES into a Component \\nEntity Structure (CES) (Mittal and Martin 2013). To demonstrate the relationship between SES modeling \\nand hypergraph models, a simple two-device IoT from the PES shown in Figure 6, is presented as a \\nhypergraph in Figure 7. It identifies four hyperedges: e1 (purple), e2 (green), e3 (brown) and e4 (black), \\nconnecting entities in the example IoT-Inclusive-system PES. Hyperedge e1 relates LogicalDevice-1, \\nResource-System-Router, and Connection-Wired-1. Further, it also shows LogicalDevice-1 is a part of two \\nhyperedges, e1 and e4. Figure 6 and 7 illustrate how an SES representation can be depicted as a hypergraph. \\nDescribing the underlying mathematical transformation functions is outside the scope of this paper and will \\nbe reported in future publications. 5 THE IOT COMPLEXITY Undesired functionality is a significant concern in highly complex systems. A device or system can exhibit \\nundesired functionality either because such functionality was unintended (e.g., software vulnerabilities \\nintroduced in development causing unexpected behavior), or because it was unplanned (e.g., functionality \\nintentionally designed into the device, but unexpected by the end-user). Unfortunately, as has been \\ndemonstrated in the IT world by security breaches and failures, such unexpected functionality is almost \\nimpossible to eliminate. Both unintended and unused functionality results in undesired system behavior, \\nand in highly complex systems can have cascading repercussions. IoT devices add a new type of operational complexity. Information technology systems, by definition, are \\ninformation centric. When these systems display undesired functionality, it typically impacts",
  "updated_at": "10/7/2018 12:00:00 AM",
  "created_at": "7/3/1994 12:00:00 AM"
}