{
  "sdl_source_type": "MPL",
  "productName": "trivia Democratic",
  "uploadedate": "2012-06-25T00:00:00",
  "productUrl": "http://signing.com",
  "creatorNames": "Nuria u Repas;Jewell b Ferra;Caroll q Formento",
  "uploaded": "2019-10-18T00:00:00",
  "sdl_extracted_summary": "design emphasizes performance and simplicity over accuracy. using the features from the previous section, and the remainder was used for supervised learning. In the end, over 30 million DNS queries were paired down and preprocessed to make up six sets of ~80,000 benign-domain feature vectors each. The data was broken up this way to enable repeated trials when testing the efficacy of the approach. D. DNS Tunneling Tool A typical route for recording malicious traffic is to run one or more malware samples in a controlled environment and watch their behavior. This method was explored but abandoned for the simple reason that known malware families and tunneling protocols may not be representative of future attacks. Instead, a tool was developed in Node.js to perform DNS tunneling over a local network and simulate domains exhibiting various behaviors. This exercise provided the following insights into the adversarial perspective and some of the key constraints when working inside the DNS protocol: 1) Length Restrictions: DNS queries cannot be arbitrarily long. A single QNAME is limited to 253 bytes, including label separators (periods). Messages longer than this must be broken into multiple packets. An adversary may also limit the number of bytes used to avoid detection and decrease the risk of dropped packets. DNS also limits the number of bytes in each label to 63. This complicates the process of sending a datagram as a DNS query, because periods must be inserted every 63 characters, which in turn increases the total query length. 2) Limitations to UDP: DNS queries are typically served over UDP, in which IPv4 packets are limited to 512 bytes (on some systems). This is not a problem for the client, since a QNAME is limited to 253 bytes. However, the server must be aware of how many bytes its answer is adding before sending the response, or a CONNREFUSED error may be triggered. In other words, there is a limit to how much data can be encoded in a server reply; multiple queries are necessary when dealing with large server-to-client transmissions. This problem is resolved in the wild by switching to TCP if more than 512 bytes are needed. It can also be mitigated with the use of message compression, which uses the space in a DNS packet more efficiently [6]. (The tool did not support TCP or message compression.) 3) Valid Characters: Restrictions are imposed on what characters can constitute a valid hostname [6]. Specifically, only letters, digits, and hyphens are allowed (with no hyphen at the beginning of a label). However, this is only technically enforceable at the domain registration level, meaning that subdomains (the portion of the FQDN carrying the data in DNS tunneling) might get away with other characters. The risk is that lack of support or deliberate filtering by DNS infrastructure between the client and server may cause packets to be dropped. 4) Caching: Many layers of potential caching exist in the DNS (i.e., places where the result of a query may be saved and retrieved upon subsequent identical queries). Therefore, each query must be unique to ensure it arrives at the server. The tool accomplishes this by inserting a random English word of pre-specified length into the subdomain. 5) Client-only Originiation: Due to the nature of the DNS protocol, all transmissions must conform to a question-and- answer format. In other words, the client must originate all communication with the server. This can be tricky to work around; in some cases, the client must simply poll the server until it receives an indication to stop. Fig. 3 offers a small window into how this works in practice. The tool was designed for many uses and configurations so that it could synthesize a robust and diverse dataset. The following client behaviors (commands) were supported: Ping the server. \\n Send a short message to the server. \\n Send a short message to the server and receive the same message as a response. Send a long message to the server. \\n Transmit a file to the server. \\n Retrieve a file from the server. The following parameters were varied in the simulation: Command (ping, short message, etc.). \\n Resource record type (A, AAAA, TXT). \\n Character encoding (base64, base32, hex, utf8). \\n Encryption (AES or none). \\n Message length. \\n Number of commands per domain. \\n File transmitted (empty, text, image, etc.). \\n Length of anti-caching string. A simulation was designed to synthesize DNS traffic for domains exhibiting each of the supported behaviors with randomly chosen configurations. A single run produces 4,800 domains, each having a different number of queries. Six runs were conducted to complement the benign-domain feature sets, for a total of about 4 million DNS tunneling queries. E. Threat Classification The parsing and feature extraction infrastructure was written in Python so that the application could make use of the excellent scikit-learn library [7]. This design choice enabled the exploration of six machine learning algorithms: Random Forest, Gradient Boosting, AdaBoost, Bagging, Support Vector Classifier (SVC), and Stochastic Gradient Descent (SGD). For each, 80% of the preprocessed and labeled dataset was used for training and validation, and 20% was held out for testing. Fig. 3. Combined log outputs of DNS tunneling tool resulting from starting the server evil.com and executing the ping command from the client. The hyperparameters of the estimators were selected with randomized parameter optimization and 3-fold cross validation using the F1 score (the weighted harmonic mean of precision and recall). The final results were determined by the performance of the classifiers on the hold-out set. III. RESULTS A. Feature Value Distribution Fig. 4 gives a rough picture for each of the features of how the distributions of benign and malicious samples differ. It shows that most are quite good at distinguishing benign and malicious traffic, except for those that try to analyze the content of the query based on an expectation of what normal DNS traffic is supposed to look like (Alphanumeric Content Ratio, Average LMW Length Ratio, and Average English Content Ratio). This suggests that our intuitions about the typical use of DNS may not exactly match the reality. It bears noting that the Unique Query Ratio (UQR) plot contains a spike of benign domains at 0.5. There are several potential reasons for this phenomenon, including redirects, a single-retry policy, or domains with exactly two total queries. Regardless, it represents a potential vulnerability with this feature, as a malicious actor might mask itself by tuning its UQR to 0.5. B. Classifier Performance The gathered datasets allowed for six tests. The following hyperparameters were selected based on the validation step for one of the six datasets (the same were used for all tests to be consistent):1 AdaBoost: n_estimators=175, learning_rate=1.5 \\n Bagging: n_estimators=75, max_samples=1.0, max_features=6 1 See scikit-learn.org for documentation of each parameter. GradientBoosting: n_estimators=200, \\nmax_features=None, max_depth=5, loss=exponential, criterion=friedman_mse RandomForest: n_estimators=100, \\nmax_features=None, max_depth=10, criterion=entropy, class_weight=None SVC: shrinking=False, kernel=rbf, gamma=scale, \\nclass_weight=None, C=1.05 SGD: tol=0.1, penalty=l1, max_iter=200, \\nloss=hinge, class_weight=None Fig. 5 shows the average precision and recall for each classifier over all the trials. In this case, precision is the portion of domains classified as malicious that actually came from the DNS tunneling dataset, and recall is the portion of actually malicious domains that were classified correctly. In other words, precision measures the confidence of the model when it flags a domain as malicious, and recall measures how likely the model is to detect a malicious domain when it is given one. These results indicate that the application of supervised learning to this problem greatly improves the performance of the analytic. For comparison, the same tests were run for the Isolation Forest classifier, the unsupervised learner used by Nadler et al. It achieved an average precision of 0.8834 and an average recall of 0.7992 with the following hyperparameters: n_estimators=175, max_samples=0.0625, max_features=4, contamination=0.05 The training time for each trial was also recorded. Fig. 6 shows the average runtime for the training step of each estimator. When selecting a machine learning algorithm to use in an operational analytic, the tradeoff between fidelity and speed must be considered. For example, if training is conducted often and with large datasets, SGD may be a better choice even though it exhibits lower recall. Fig. 4. Distrubution of feature values for benign and malicious samples. The charts are histograms with bins of width 0.1. Blue represents benign samples, and orange represents malicious samples. \\nFig. 5. Average precision and recall over six trials. Error bars represent one standard deviation. 0.99 0.991 0.992 0.993 0.994 0.995 0.996 0.997 0.998 0.999 1 Precision Recall C. Efficacy Confirmation To verify the benign set was representative of queries in an operational environment, another trial was conducted with confidential enterprise DNS traffic instead of the USC sample. Though there were some small differences in the feature value distribution (i.e., Fig. 4 looked slightly different), the classifiers exhibited only a marginal performance degradation. Perhaps a greater concern is that the DNS tunneling tool is not diverse enough to capture the behavior of real malware. To validate the effectiveness of the",
  "sdl_date": "2020-03-18T00:00:00",
  "countryPublished": "Egypt",
  "conference": "pedometer's handicaps nu Sania",
  "originalAuthorName": "Edelina p Ehmann",
  "title": "code's jabbered",
  "declaredTags": "computer vision|ATC|Federal Aviation Administration|flexibility|security",
  "releaseReason": "unseemlier/anatomic",
  "docName": "FC_40_1641",
  "fundingCenter": 60,
  "resourceURL": "https://disunites.com",
  "fundingDepartment": "sw46",
  "caseNumber": "66-3302",
  "publicationDate": "1/5/2018 12:00:00 AM",
  "releaseYear": 2006,
  "releaseStatement": "Advertising/Recruiting",
  "approver": "$Donghai $Reolid",
  "handCarry": 9,
  "authorDivision": "as35",
  "copyrightOwner": "Ascendina Riso",
  "lastModifiedDate": "6/25/2019 12:00:00 AM",
  "releaseDate": "7/18/2011 12:00:00 AM",
  "onMitrePublicSrvr": 0,
  "projectNumber": "2211JGKV34",
  "materialType": "Book",
  "publicationType": "Article",
  "authorCenter": 61,
  "originalAuthorID": "Gaudencia",
  "mitrePublicServer": 0,
  "subjectTerminology": "Network Security",
  "dateEntered": "7/8/2006 12:00:00 AM",
  "documentInfoURL": "https://tenderize ramifies ablaze Hilario Biro.com",
  "softShell": 0,
  "publishedOnNonMITREServer": 0,
  "priorCaseNumbers": "CASE1: 16-4196|CASE1: 18-0469|CASE1: 16-0818",
  "organization": "eu18",
  "authorDepartment": "fd34",
  "publicationYear": 2009,
  "sensitivity": "Public",
  "copyrightText": "(c) 2016 The MITRE Corporation All Rights Reserved",
  "fundingSource": "NIST FFRDC Contracts",
  "level1": "MITRE Legacy",
  "fundingDivision": "distort sitters anagram's terms heliports",
  "publishedOutsideUSA": 0,
  "level3": "ds29",
  "level2": "fh17",
  "sdl_id": "64c8f991e02c4624a2ff41a5e33486d2",
  "text": "infrastructure experienced particularly heavy workloads and delays. HSSEDI recommends that the NGCI Apex program use these market events and \\nHSSEDIs Threat Model to inform detailed test scenarios for use in the representational \\ntesting environment. HSSEDI recommends that the NGCI Apex program integrate this dynamic, data map \\nwith HSSEDIs previous technical reports on Cybersecurity Risk Metrics Survey and the \\nFinancial Systems Mapping to provide a more comprehensive treatment of the systemic \\nrisk facing the FSS. xxii List of Acronyms \\nAcronym Definition AAPL Apple Stock ATS Alternative Trading System BAC Bank of America Stock BATS Better Alternative Trading System BYX BATS Y Exchange BZX BATS Z Exchange CHX Chicago Stock Exchange DHS Department of Homeland Security EDGA Direct Edge A Exchange EDGX Direct Edge Exchange FFRDC Federally Funded Research and Development Center FIX Financial Information Exchange FSS Financial Services Sector HSSEDI Homeland Security Systems Engineering & Development Institute IEX The Investors Exchange IT Information Technology MIDAS Market Information Data Analytics System NASDAQ National Association of Securities Dealers Automated Quotations NBBO National Best Bid and Offer NGCI Next Generation Cyber Infrastructure NMS National Market System NQ-Bost NASDAQ Exchange Boston NQ-Phil NASDAQ Exchange Philadelphia NYSE New York Stock Exchange S&T Science and Technology Directorate xxiii SIP Security Information Processor _top\\n _GoBack\\n _Hlk512505773\\n _Hlk512525564\\n _Hlk512527351\\n _Toc520809951\\n _Hlk507572077\\n _Hlk511132380\\n _Toc458418744\\n _Toc506884990\\n _Toc520809952\\n _Toc520809953\\n _Hlk511131973\\n _Toc520809954\\n _Ref511144745\\n _Toc520809966\\n _Ref508206643\\n _Toc520809967\\n _Ref511056092\\n _Toc520809968\\n _Toc520809955\\n _Ref511146316\\n _Toc520809969\\n _Toc520809956\\n _Toc520809957\\n _Ref508207135\\n _Toc520809970\\n _Ref508207255\\n _Toc520809971\\n _Ref508207284\\n _Toc520809972\\n _Ref508207438\\n _Toc520809973\\n _Ref508207505\\n _Toc520809974\\n _Toc520809958\\n _Ref508207582\\n _Toc520809975\\n _Ref508290610\\n _Ref508217307\\n _Toc520809982\\n _Ref508290615\\n _Toc520809983\\n _Ref508290655\\n _Toc520809984\\n _Ref508638799\\n _Toc520809976\\n _Ref508217091\\n _Toc520809977\\n _Toc508315137\\n _Toc520809959\\n _Ref508286059\\n _Toc520809960\\n _Toc520809961\\n _Toc508315141\\n _Toc508612111\\n _Toc508612165\\n _Toc508315142\\n _Toc508315143\\n _Hlk511152344\\n _Hlk511152252\\n _Ref508311245\\n _Ref508217488\\n _Toc520809978\\n _Ref508612947\\n _Toc520809979\\n _Toc520809962\\n _Toc520809963\\n _Ref508217526\\n _Toc520809980\\n _Ref508217567\\n _Toc520809981\\n _Toc520809964\\n _Toc520809965 \",",
  "updated_at": "4/24/2011 12:00:00 AM",
  "created_at": "4/27/2005 12:00:00 AM"
}