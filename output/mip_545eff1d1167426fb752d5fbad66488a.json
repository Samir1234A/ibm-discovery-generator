{
  "sdl_source_type": "MIP Projects",
  "chargeCode": "dxn",
  "longName": "pvunsdlhqn-5434",
  "endDate": "2020-01-08T00:00:00",
  "phonebookDisplayName": "Satish Isaikin",
  "startDate": "2004-08-31T00:00:00",
  "status": "Cancelled",
  "portfolios": "Deadhead's|outspokenly",
  "name": "welled motorcycle's",
  "public_url": null,
  "project_url": "http://Amherst.com",
  "sdl_date": "2020-06-15T00:00:00",
  "countryPublished": "Congo {Democratic Rep}",
  "conference": "applies becomes xa Bru",
  "originalAuthorName": "Alam h Siu",
  "title": "simplify",
  "declaredTags": "concept of operations|camera feeds and surveillance technology|future of aviation|lessons learned from aviation safety",
  "releaseReason": "betokens/rice",
  "docName": "UE_40_2626",
  "fundingCenter": 78,
  "resourceURL": "https://maples.com",
  "fundingDepartment": "dl50",
  "caseNumber": "33-1488",
  "publicationDate": "11/4/2017 12:00:00 AM",
  "releaseYear": 2011,
  "releaseStatement": "MITRE External Publication",
  "approver": "$Liberato $Morenza",
  "handCarry": 0,
  "authorDivision": "ra75",
  "copyrightOwner": "Leidiane Koerv",
  "lastModifiedDate": "3/10/2002 12:00:00 AM",
  "releaseDate": "7/13/2013 12:00:00 AM",
  "onMitrePublicSrvr": 0,
  "projectNumber": "2268HYPP61",
  "materialType": "Book",
  "publicationType": "Article",
  "authorCenter": 31,
  "originalAuthorID": "Zohir",
  "mitrePublicServer": 0,
  "subjectTerminology": "Management (General)",
  "dateEntered": "12/7/2002 12:00:00 AM",
  "documentInfoURL": "https://rhapsody specializing millepedes planetary fulfillment's.com",
  "softShell": 0,
  "publishedOnNonMITREServer": 0,
  "priorCaseNumbers": "CASE3  17-2945|CASE1: 18-1446|CASE1: 18-0562|CASE1: 16-4753",
  "organization": "em29",
  "authorDepartment": "kn87",
  "publicationYear": 1992,
  "sensitivity": "Public",
  "copyrightText": "(c) 2016 The MITRE Corporation All Rights Reserved",
  "fundingSource": "CAASD Non-Direct Project",
  "level1": "MITRE National Security Sector",
  "fundingDivision": "beasts whiplashes Hockney's rotunda envelop",
  "publishedOutsideUSA": 0,
  "level3": "ib86",
  "level2": "nn47",
  "sdl_id": "545eff1d1167426fb752d5fbad66488a",
  "text": "    \"text\": \" () Approved for Public Release; Distribution Unlimited: 17-2852. Agile Acquisition Strategy Definition: Agile acquisition is the strategy, structure, and process to effectively adopt and apply agile software development methodologies. Agile acquisition integrates planning, design, development, and testing into an iterative life cycle to deliver small, frequent, incremental capabilities to an end user. Agile acquisition in government programs requires integrated government and contractor processes and partnerships. It embraces the agile development principles of self-organizing cross-functional teams, frequent capability deliveries, continuous user participation and feedback, and evolving requirements. Keywords: acquisition strategy, agile, agile acquisition, agile development, incremental, uncertainty, rapid MITRE SE Roles and Expectations: MITRE systems engineers (SEs) are expected to understand the fundamentals of agile acquisition, identify when it is appropriate to adopt an agile strategy, and understand how to successfully adopt and implement agile practices for a program. They should understand how systems engineering processes may change within an agile environment and how to tailor them to program constraints and objectives. SEs must understand that the challenges of dynamic development, requirements, and related processes require significant rigor, coordination, and integration. Background Agile development is built around a culture of small, dynamic, empowered teams actively collaborating with stakeholders throughout product development. Agile development requires team members to follow disciplined processes that require training, guidance, and culture change. The agile method does not follow a set of standard waterfall-based prescribed formal processes. Agile methods demand processes specifically tailored for a rapid, iterative, dynamic development approach, especially in the areas of requirements, test, and systems engineering. Agile acquisition can be distilled into four core elements: 1. Structuring the program via small, frequent capability releases \\n2. Valuing working software over comprehensive documentation \\n3. Responding to changes in operations, technology, and budgets \\n4. Actively involving users throughout development to ensure high operational value The foundational structure of an agile program, as depicted in Figure 1, is: Release: Capability delivered to users, composed of multiple sprints \\n Sprint: Priority capabilities developed, integrated, tested, and demonstrated (aka iteration) Approved for Public Release; Distribution Unlimited: 17-2852. Daily scrum: Team synchronization meeting to plan activities and assess progress and \\nimpediments \\nFigure 1. Basic Agile Structure Enabling an agile acquisition strategy demands some degree of upfront planning and design, but it places importance on beginning development quickly. The fundamental assumption is that requirements, designs, and capabilities will evolve as team members gain information during the development process [1]. When to Use Agile In determining whether an agile acquisition strategy is appropriate for the program, it is critical to evaluate the operational, acquisition, and developer conditions. Agile acquisition strategies should be considered when: The full set of requirements cannot be defined up front, but an initial set can be \\ndetermined, at least for a first release. Requirements can be decomposed into small tasks to support iterative development. \\n Users want smaller, more frequent, iterative deliveries. \\n Users are able to actively engage throughout development. \\n User feedback is used to shape the requirements for future releases. \\n Acquisition processes can be tailored to support smaller, frequent releases. \\n Leadership and stakeholders support an agile acquisition strategy and processes. \\n The government program office has agile trained or experienced individuals, tailored processes, and access to coaches, and developers have agile experience. Users, program office staff, and developers can establish a collaborative environment \\nand are able to collocate or establish an effective virtual working environment. The program can leverage enterprise platforms, processes, and documents for \\ncontracting, development, and test to enable rapid execution. Agile acquisition works best with smaller scoped developments, such as a self-contained application or incremental upgrade to an operational system. Agile can scale to apply to larger development efforts, but this requires additional rigor in technical architecture, coordination across development teams, and integration. It is difficult to develop a large infrastructure system from the start using agile development. The more agile development can leverage an established infrastructure platform, the more autonomy the team will have for their iterative development. A program can use a traditional approach to build an initial increment that meets the baseline Approved for Public Release; Distribution Unlimited: 17-2852. architecture requirements. Once the program has established a baseline and framed the overall conceptual design, program managers can consider shifting to an agile approach for subsequent releases that build additional functionality into the operational baseline. Best Practices and Lessons Learned Setting up an agile environment. An agile acquisition strategy represents a change in the way the government traditionally conducts business. Programs must rethink how they are staffed, organized, and managed, and they must structure the business processes, governance reviews, and funding models to support agile methods. Agile requires dedicated government involvement throughout the entire process in order to plan and integrate multiple releases, oversee development cycles, manage evolving requirements, facilitate collaboration, and obtain committed, active, and consistent user engagement. The optimal structure to foster a collaborative environment features physical collocation of the acquisition support team, which consists of the program staff, contractor, and supporting functional areas. Constant communication across the team is essential. Most agile methodologies require daily meetings for status, direction, feedback, and assignments. A culture of trust that spans the decision authority, developers, testing organization, acquirers, program management, and users is critical to successful agile delivery. Structuring an agile program. The way a program is structured into releases and sprints from the start can play a key role in its success over the life cycle. Government program managers in consultation with operators and developers must determine the optimal timelines for releases and sprints on the basis of various constraints, risks, and other factors. The primary drivers include how frequently the operational community wants and can integrate new releases, and the ability of the development environment to regularly build, integrate, test, quality assess, and deploy capabilities. Traditional acquisition, contracting, budget, test, and related processes constrain development, but the program should tailor these processes to support smaller, more frequent releases. Active stakeholder engagement and contributions can aid the program in designing the acquisition and development processes to fit the planned structure. Requirements management. The agile methodology embraces requirements change throughout development. Because it is often difficult to define the full set of requirements for systems up front, they can be iteratively identified and shaped along the way. Given the rapid pace of changes in technologies and operational environments, requirements can evolve over time. Active user involvement is needed to inform the development process and provide feedback based on early releases. This gives users the opportunity to add, edit, and delete requirements with sufficient management controls. Requirements are managed via a prioritized product backlog that is typically in a database format, instead of a single document. A product owner from the user community traditionally controls the requirements backlog. The highest priority requirements that can be developed within the set timeframe define the scope of the next release. Approved for Public Release; Distribution Unlimited: 17-2852. Release requirements can be changed during development. Sprint requirements are an agreed-to subset of a release between the users and developers and are locked, preventing changes for this short interim build. See Figure 2. \\nFigure 2. Program, Release, and Sprint Backlogs Systems engineering. In an agile environment, systems engineering requires tailored methods and processes to incrementally deliver capabilities. SEs play a critical role in technical and programmatic integration via disciplined engineering processes. To enable faster, smaller deliveries, enterprise architectures are required to guide system design. Agile systems engineering practices, such as design reviews, are not one time events for the entire system, but rather an iterative process with smaller, more frequent reviews built into each release. It is critical to keep all key stakeholders informed on a regular basis, given the rapid and dynamic nature of the agile environment. Conducting a demonstration of capabilities at the end of each sprint and release is an opportunity to bring users, developers, and other stakeholders together to drive collaboration and decision making. It is important to put in place a clear architecture that is refined over time as sprints and releases are developed. The architecture should be government managed and should involve active collaboration with the contractors developing capabilities governed by it. SEs should periodically hold technical reviews for large elements of the system (broader than any release) to assess designs, performance, and alternatives. SEs should actively partner with testers to ensure active and early involvement in the process and to establish a common set of expectations for outcomes. Architecture. The architecture of the system should have enough flexibility so that capabilities can be designed, added, or modified with functional independence. In other words, the system is architected and designed so that capabilities scheduled for delivery can interoperate with the components that have been delivered and do not have critical operational dependencies on capabilities that have not yet been delivered. Layered architectures lend themselves to this application. Components may be developed for different layers; concentrating on the most commonly used/reused components first. An initial capability for delivery could be a component that",
  "updated_at": "9/1/2012 12:00:00 AM",
  "created_at": "7/5/1991 12:00:00 AM"
}